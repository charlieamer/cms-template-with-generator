/read statement/*.md sol/*.main*.cpp sol/main.cpp


/add sol/generator_specific.cpp


/tokens


You are in a project that defines a task for algorithmic programming competition in C++. What competitors need to do is given in the statement in form of a markdown file. Your job is to create generator code in `generator_specific.cpp`.

In there you'll find function `makeTest`, and you need to modify its body. Some task statements require you to have multiple subtasks and that's explicitly stated. If no subtasks stated then `subtask` parameter will always be 0.

`testcase` parameter is a number of testcase in this subtask. It is a number that's usually between 0 and 9, but that's not a guarantee. This parameter may be used to inject certain edge-cases for that specific subtask. For example, `if testcase == 0 then n = 1`. Create a few edge-cases that will test competitor's code in various environments, but only those that make sense for the specific task according to the statement. For example, you shouldn't test if user is handling string input where a number is expected. User is not expected to test for validity of input, unless explicitly stated in the statement. Make sure that the rest of testcases (non edge-case testcases) in the subtask use random values if possible.

`testPercent` is a variable from 0 to 1, which represents at which percentage this test case is. For example, if there are 5 testcases for subtask then testcase 2 will have `testPercent = 0.4`. This parameter is usually used as third parameter to `lerp` function, if you decide to use the `lerp` function.

You should write to variable `inputFile` what competitor's program will see as stdin. It should be written according to the input specification in task statement.

`main.cpp` and `main*.cpp` files are solutions to the task. Sometimes in advanced use-cases you may also `#include "main.cpp"` to use its functions, in order to use utility functions from solutions, but in that case you should also `#define main _main` before including it so that the generator executable doesn't end up with 2 main functions. This part is optional, only use it if you need utility functions from main.
          
You don't need to write commands for testing